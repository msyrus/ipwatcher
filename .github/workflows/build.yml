name: Build and Test

on:
  push:
    branches: [ main ]

# Required secrets for integration tests:
# - CLOUDFLARE_API_TOKEN: Your Cloudflare API token
# - CLOUDFLARE_TEST_ZONE_ID: Zone ID for testing (e.g., abc123...)
# - CLOUDFLARE_TEST_ZONE_NAME: Zone name for testing (e.g., example.com)

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Only run integration tests if secrets are available (not on forks)
    if: ${{ github.event_name == 'push' && github.repository == 'msyrus/ipwatcher' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run integration tests
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_TEST_ZONE_ID: ${{ secrets.CLOUDFLARE_TEST_ZONE_ID }}
        CLOUDFLARE_TEST_ZONE_NAME: ${{ secrets.CLOUDFLARE_TEST_ZONE_NAME }}
      run: go test -v -p 1 -parallel 1 -tags=integration ./internal/dnsmanager/

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    # Allow build to proceed even if integration tests are skipped
    if: |
      always() &&
      needs.test.result == 'success' &&
      (needs.integration-test.result == 'success' || needs.integration-test.result == 'skipped')

    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.25'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build -o ipwatcher-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/ipwatcher

    - name: Upload artifacts
      uses: actions/upload-artifact@v5
      with:
        name: ipwatcher-${{ matrix.goos }}-${{ matrix.goarch }}
        path: ipwatcher-${{ matrix.goos }}-${{ matrix.goarch }}

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    # Allow Docker build to proceed even if integration tests are skipped
    if: |
      always() &&
      needs.test.result == 'success' &&
      (needs.integration-test.result == 'success' || needs.integration-test.result == 'skipped')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: msyrus/ipwatcher:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test Docker image
      run: |
        docker images msyrus/ipwatcher:latest
